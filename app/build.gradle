/*
 * Copyright (c) 2015 Markus Poeschl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */














buildscript {
    dependencies {
        classpath 'com.github.jcandksolutions.gradle:android-unit-test:2.0.2'
        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.12.0'
        classpath 'com.jakewharton.hugo:hugo-plugin:1.1.0'
        classpath 'io.fabric.tools:gradle:1.14.4'
    }
}

// Manifest version information!
def versionMajor = 1
def versionMinor = 0
def versionPatch = 0

apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'hugo'

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))
project.ext.set("gitSha", gitSha)

android {

    compileSdkVersion 21
    buildToolsVersion "21.1.1"

    signingConfigs {
        googlePlay {
            //Placeholder which gets automatically filled during project sync. Needs the right setting file.
            //This settings is not in the source control, because it contains sensitive information.
        }
    }

    defaultConfig {
        applicationId "de.poeschl.apps.tryandremove"
        minSdkVersion 15
        targetSdkVersion 21

        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
    }

    lintOptions {
        lintConfig file("lint.xml")
        checkReleaseBuilds true
        abortOnError true
    }

    buildTypes {
        release {
            minifyEnabled false //Don't forget to set crashlytics up for proguard
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.googlePlay


            applicationVariants.all { variant ->
                renameReleasePackage(variant, defaultConfig)
            }
        }
        debug {
            applicationIdSuffix '.dev'
            ext.enableCrashlytics = false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

apply plugin: 'android-unit-test'

androidUnitTest {
    testReleaseBuildType true
    //Run tests for all the build types including non-debuggable (like the Release build type). Only works for Application projects, not Library projects.
    downloadDependenciesSources false
    //Download the sources.jar for the production dependencies. `true` by default.
    downloadDependenciesJavadoc true
    //Download the javadoc.jar for the production dependencies. `false` by default.
    downloadTestDependenciesSources false
    //Download the sources.jar for the test dependencies. `true` by default.
    downloadTestDependenciesJavadoc true
    //Download the javadoc.jar for the test dependencies. `false` by default.
}

apply plugin: 'checkstyle'

checkstyle {
    configFile new File("${project.projectDir}/../checkstyle/checkstyle.xml")
    reportsDir new File("${project.projectDir}/build/outputs")
    toolVersion "6.2"
}

//Add checkstyle execution on debug and release build
assembleRelease {
    it.dependsOn 'checkstyle'
}
assembleDebug {
    it.dependsOn 'checkstyle'
}
task checkstyle(type: Checkstyle) {
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    classpath = files()
}

//Get environment variable of keystore settings folder location.
def keyStorePath = System.getenv('Android_Keystore_Path')

/*
 * Adds dynamically keys and secret stuff to the project
 */
afterEvaluate { project ->
    def propsFile = file(keyStorePath + '/TryAndRemove.keyproperties')

    def configName = 'googlePlay'
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))

        if (android.signingConfigs.hasProperty(configName)) {

            //Android signing information
            android.signingConfigs[configName].storeFile = file(keyStorePath + '/' + props['storeFile'])
            android.signingConfigs[configName].storePassword = props['storePassword']
            android.signingConfigs[configName].keyAlias = props['keyAlias']
            android.signingConfigs[configName].keyPassword = props['keyPassword']
            println("Setup keystore settings.")
        }

        //Fabric keys
        File crashlyticsProps = new File(getBuildFile().getPath().replace(getBuildFile().getName(), "crashlytics.properties"));
        FileWriter writer = new FileWriter(crashlyticsProps, false);

        try {
            writer.write("apiSecret=" + props["crashlytics_appSecret"]);
            writer.write("\n")
            writer.write("apiKey=" + props["crashlytics_apiKey"]);
        } finally {
            writer.close();
        }
        println("Setup crashlytics keys.")


    } else {
        System.err.println("File " + propsFile.name + " for key setup not available");
    }
}

/*
 * Gives the output apks the right names. Automatic file name convention.
 */

def renameReleasePackage(variant, defaultConfig) {
    variant.outputs.each { output ->
        def fileName = "Try And Remove - " + defaultConfig.versionName + " - " + project.gitSha + ".apk";

        def file = output.packageApplication.outputFile
        output.packageApplication.outputFile = new File(file.parent, fileName)
    }
}

dependencies {
    compile 'com.jakewharton:butterknife:6.0.0'
    compile 'com.jakewharton.timber:timber:2.5.0'
    compile 'com.squareup.dagger:dagger:1.2.1'
    compile('com.crashlytics.sdk.android:crashlytics:2.2.1@aar') {
        transitive = true;
    }
    compile 'com.android.support:recyclerview-v7:21.0.3'
    compile 'com.android.support:appcompat-v7:21.0.3'
    compile 'com.getbase:floatingactionbutton:1.4.0'
    provided 'com.squareup.dagger:dagger-compiler:1.2.1'

    testCompile 'junit:junit:4.10'
    testCompile 'org.robolectric:robolectric:2.4'

    androidTestCompile 'com.jayway.android.robotium:robotium-solo:5.2.1'
    androidTestCompile 'org.hamcrest:hamcrest-core:1.3'
    androidTestCompile 'org.hamcrest:hamcrest-library:1.3'

    debugCompile 'com.android.support:support-v4:21.0.3'
    debugCompile 'com.jakewharton.scalpel:scalpel:1.1.1'
}
